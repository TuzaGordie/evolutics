import { HttpErrorResponse } from '@angular/common/http';
import { Component, Inject, OnInit } from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { CreateAccountModalComponent } from 'src/app/Life/life-components/create-account-modal/create-account-modal.component';
import { UtilityService } from 'src/app/Services/utility.service';
import { FindClientService } from '../../../service/find-client.service';

@Component({
  selector: 'app-bank-accounts',
  templateUrl: './bank-accounts.component.html',
  styleUrls: ['./bank-accounts.component.scss']
})
export class BankAccountsComponent implements OnInit {
  // isCreatingBankAccount: boolean = false;
  // newBankAccountForm: FormGroup;
  // showNewBankAccountForm: boolean = false;
  bankAccountsForm: FormArray = new FormArray([]);
  editBankStatus = {} // boolean flags to edit individual rows of bank accounts in bank modal
  banksList: any[];
  clientNo: string;
  outputData: any = {} // will be outputted from this modal using matDialog

  constructor(
    private utilityService: UtilityService,
    private clientS: FindClientService,
    private dialogRef: MatDialogRef<BankAccountsComponent>,
    @Inject(MAT_DIALOG_DATA) data,
  ) {
    this.clientNo = data.clientNo;
  }

  ngOnInit(): void {
    // this.createNewBankAccountForm();
    this.setClientBanks(this.clientNo);
  }

  createNewPaymentMethod(){
    this.utilityService.dialogOpener(
      CreateAccountModalComponent,
      {position: {top: '10vh'}},
      (data) => console.log("new payment method created", data),
      () => console.log("cancelled creating new payment method")
    )
  }

  // createNewBankAccountForm(){
  //   this.newBankAccountForm = new FormGroup({
  //     accountName: new FormControl(null, Validators.required),
  //     bankAdd: new FormControl(null),
  //     authBy: new FormControl(null),
  //     accountNo: new FormControl(null, Validators.required),
  //     bankTown: new FormControl(null),
  //     bankCity: new FormControl(null),
  //     bankBranch: new FormControl(null),
  //     country: new FormControl(null),
  //     bankName: new FormControl(null, Validators.required),
  //     active: new FormControl(true),
  //     no: new FormControl(null),
  //     blocked: new FormControl(false),
  //     sortCode: new FormControl(null),
  //     bankSwiftCd: new FormControl(null),
  //     currency: new FormControl("NGN"),
  //     accountType: new FormControl(null, Validators.required),
  //     blockedDate: new FormControl(null),
  //     clientNo: new FormControl(this.clientNo),
  //     id: new FormControl(null), // autogenerated when bank account is created
  //     payeeNo: new FormControl(null),
  //     clientId: new FormControl(null)
  //   })
  // }

  setClientBanks(clientNo) {
    this.clientS.getClientBanksList(clientNo).subscribe(
      (res) => {
        if (!Array.isArray(res)) res = [res]
        res.forEach(account => {
          this.bankAccountsForm.push(this.newBankAccountFormGroup(account))
          this.editBankStatus[account.id] = 'VIEW' // display the edit button
        })
      },
      (err: HttpErrorResponse) => {
        console.log("error fetching bank accounts for client with clientNo: " + this.clientNo, err)
      }
    );
  }

  newBankAccountFormGroup(account){
    return new FormGroup({
      accountName: new FormControl(account.accountName, Validators.required),
      bankAdd: new FormControl(account.bankAdd),
      authBy: new FormControl(account.authBy),
      accountNo: new FormControl(account.accountNo, Validators.required),
      bankTown: new FormControl(account.bankTown),
      bankCity: new FormControl(account.bankCity),
      bankBranch: new FormControl(account.bankBranch),
      country: new FormControl(account.country),
      bankName: new FormControl(account.bankName, Validators.required),
      active: new FormControl(account.active),
      no: new FormControl(account.no),
      blocked: new FormControl(account.blocked),
      sortCode: new FormControl(account.sortCode),
      bankSwiftCd: new FormControl(account.bankSwiftCd),
      currency: new FormControl(account.currency),
      accountType: new FormControl(account.accountType, Validators.required),
      blockedDate: new FormControl(account.blockedDate),
      clientNo: new FormControl(account.clientNo),
      id: new FormControl(account.id),
      payeeNo: new FormControl(account.payeeNo),
      clientId: new FormControl(account.clientId)
    })
  }

  // createBankAccount(){
  //   if (this.newBankAccountForm.invalid){
  //     this.newBankAccountForm.markAllAsTouched()
  //     return
  //   }
  //   this.isCreatingBankAccount = true
  //   this.clientS.createBankAccount(this.newBankAccountForm.value).subscribe(
  //     (res: any) => {
  //       this.bankAccountsForm.push(this.newBankAccountFormGroup(res));
  //       this.newBankAccountForm.reset()
  //       this.editBankStatus[res.id] = 'VIEW' // display edit button for this row
  //       this.outputData.bankAccountsCount = this.bankAccountsForm.value.length// update the count on the view-client
  //       this.isCreatingBankAccount = false;
  //     },
  //     (err: HttpErrorResponse) => {
  //       console.log("error creating adding new bank account for clientNo: " + this.clientNo, err);
  //       this.utilityService.notify("error adding new bank account: " + err.statusText, 0)
  //       this.isCreatingBankAccount = false;
  //     }
  //   )
  // }

  editBankAccount(bankControl){
    if (bankControl.invalid){
      bankControl.markAllAsTouched()
      return
    }
    this.editBankStatus[bankControl.value.id] = 'PENDING'

    this.clientS.updateClientBank(bankControl.value.id, bankControl.value).subscribe(
      (res: any) => {
        bankControl = this.newBankAccountFormGroup(res)
      },
      (err: HttpErrorResponse) => {
        console.log("error editing bank account for client: " + bankControl.value.clientNo, err),
        this.utilityService.notify("error updating bank account with id: " + bankControl.value.id, 0)
        this.editBankStatus[bankControl.value.id] = 'EDITING'
      }
    )
  }

  closeDialog(){
    this.dialogRef.close({event: 'DONE', data: this.outputData})
  }
}
