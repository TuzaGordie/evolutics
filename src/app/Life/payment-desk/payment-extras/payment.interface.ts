export interface IPayout {
  adjAmt: number;
  agentNo?: any;
  agentType?: any;
  amount?: any;
  authComplete: boolean;
  authCompleteOn?: any;
  authReq: boolean;
  bankNo: string;
  cancelled?: any;
  claimId: number;
  claimNo?: any;
  claimType: string;
  clientNo: string;
  clientReason?: any;
  companyCode: string;
  control?: any;
  controlBy?: any;
  controlOn?: any;
  coverCode: string;
  createdBy: string;
  createdOn: string;
  currency: string;
  decline: boolean;
  futureId?: any;
  id: number;
  initialAmount: number;
  lastChangeBy?: any;
  narration: string;
  netAmt: number;
  nextAuthTier: string;
  payeeName: string;
  payeeNo: number;
  paymentCode: string;
  paymentNo: string;
  paymentType: string;
  payoutBasis: string;
  payoutReason: string;
  policyCode: string;
  policyNo: string;
  policyNoSuffix: number;
  processed: boolean;
  processedOn?: any;
  productClass?: any;
  productCode?: any;
  proportion: number;
  refCat: string;
  refNo?: any;
  sentToBank: boolean;
  sentToBankOn?: any;
  slaLevel: string;
  status: string;
  tax: number;
}

interface IProxCause {
  claimNo: string;
  id: number;
  proxCause: string;
}

export interface IPendingClaim {
  selected: boolean;
  adjustments?: any;
  authBy?: any;
  authOn?: any;
  authorisedBy?: any;
  authorisedDate?: any;
  authorisedTime?: number;
  batchNo: string;
  branchCode: string;
  busLine?: any;
  claimant: string;
  claimEndDate?: any;
  claimNo: string;
  claimOuts?: number;
  claimStartDate?: any;
  claimType: string;
  claimWaitMonths?: number;
  clientNo: string;
  companyCode: string;
  completeRate?: number;
  coverCode: string;
  coverDescription?: any;
  createdBy: string;
  createdOn?: Date;
  createdTime?: number;
  currency?: any;
  currentEstimate?: number;
  dayToSla?: number;
  dvAuthBy?: any;
  dvCreatedBy?: any;
  dvCreatedOn?: Date;
  dvExecutedOn?: Date;
  estimatedBySystem?: boolean;
  eventDate?: any;
  eventOn?: Date;
  eventTime?: any;
  finalPolicyStatus?: any;
  geolocation: string;
  id: number;
  initialEstimate: number;
  initialPolicyStatus: string;
  invalidReason: string;
  locationBasis?: any;
  locationCity: string;
  locationCrty: string;
  locationRegion: string;
  locationTown: string;
  narration?: any;
  noBenefit?: boolean;
  noOfPay?: number;
  notifyDate?: any;
  paymentId?: any;
  payoutBy: string;
  payoutCode?: any;
  policyCode: string;
  policyNo: string;
  policyNoSuffix: string;
  processed?: any;
  productClass: string;
  productCode: string;
  proxCause: IProxCause[];
  readyForPayout: boolean;
  reportDate?: any;
  reportOn?: any;
  reportTime?: any;
  settleAmount?: number;
  sickDays?: number;
  status: string;
  totalAdj?: number;
  transNo?: number;
  type?: any;
  updatedBy: string;
  valid: number;
}
